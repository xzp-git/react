[{"D:\\zhufeng\\react\\react\\react\\src\\index.js":"1","D:\\zhufeng\\react\\react\\react\\src\\react-dom.js":"2","D:\\zhufeng\\react\\react\\react\\src\\react.js":"3","D:\\zhufeng\\react\\react\\react\\src\\Component.js":"4","D:\\zhufeng\\react\\react\\react\\src\\event.js":"5","D:\\zhufeng\\react\\react\\react\\src\\utils.js":"6","D:\\zhufeng\\react\\react\\react\\src\\constants.js":"7"},{"size":880,"mtime":1625151150567,"results":"8","hashOfConfig":"9"},{"size":13472,"mtime":1625147207174,"results":"10","hashOfConfig":"9"},{"size":2932,"mtime":1625150974889,"results":"11","hashOfConfig":"9"},{"size":6435,"mtime":1624709460303,"results":"12","hashOfConfig":"9"},{"size":1770,"mtime":1623930819369,"results":"13","hashOfConfig":"9"},{"size":286,"mtime":1624085102568,"results":"14","hashOfConfig":"9"},{"size":46,"mtime":1624085191084,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1fpm3gb",{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"22","messages":"23","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"24","usedDeprecatedRules":"25"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"25"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"25"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"25"},"D:\\zhufeng\\react\\react\\react\\src\\index.js",[],"D:\\zhufeng\\react\\react\\react\\src\\react-dom.js",[],"D:\\zhufeng\\react\\react\\react\\src\\react.js",[],"D:\\zhufeng\\react\\react\\react\\src\\Component.js",["32"],"import { createDOM, compareTwoVdom, findDOM } from \"./react-dom\";\r\n\r\nexport let updateQueue = {\r\n    isBatchingUpdate:false, //当前是否处于批量更新模式，默认值是false\r\n    updaters:[],\r\n    batchUpdate(){\r\n        for (const updater of this.updaters) {\r\n            updater.updateComponent()  \r\n        }\r\n        \r\n        this.isBatchingUpdate = false\r\n        this.updaters.length = 0\r\n    }\r\n}\r\n\r\nclass Updater{\r\n    constructor(classInstance){\r\n        this.classInstance = classInstance //类组件的实例\r\n        this.pendingStates = [] //等待生效的状态，可能是一个对象，也可能是一个函数\r\n        this.cbs = []\r\n    }\r\n    addState(partialState,cb){\r\n        partialState && this.pendingStates.push(partialState)  //等待生效的状态\r\n        if ( typeof cb === 'function')  this.cbs.push(cb)//状态更新后的回调\r\n        \r\n        this.emitUpdate()\r\n        \r\n        \r\n    }\r\n    //一个组件不管是属性变了 还是状态变了都会更新\r\n    emitUpdate(nextProps){\r\n        this.newProps = nextProps\r\n        if (updateQueue.isBatchingUpdate) { //如果当前是批量更新模式，先缓存\r\n            updateQueue.updaters.push(this) //本次setState调用结束\r\n\r\n        }else{\r\n            this.updateComponent() //直接更新组件\r\n        }\r\n    }\r\n    updateComponent(){\r\n        let {classInstance, pendingStates, cbs, newProps} = this\r\n        //如果有等待更新的状态\r\n        if ( newProps  || pendingStates.length > 0) {\r\n            /* classInstance.state = this.getState() //计算新状态\r\n            classInstance.forceUpdate()\r\n            cbs.forEach(cb => cb && cb());\r\n            cbs.length = 0 */\r\n\r\n            shouldUpdate(classInstance,newProps ,this.getState(newProps))\r\n            cbs.forEach(cb => cb && cb());\r\n            cbs.length = 0 \r\n        }\r\n    }\r\n    getState(nextProps){\r\n        let {classInstance, pendingStates} = this\r\n        let {state} = classInstance\r\n        pendingStates.forEach((nextState) => {\r\n            if (typeof nextState === 'function') {\r\n                nextState = nextState.call(classInstance,state)\r\n            }\r\n            state = {...state, ...nextState}\r\n        })\r\n        pendingStates.length = 0\r\n        if (classInstance.constructor.getDerivedStateFromProps) {\r\n            let partialState = classInstance.constructor.getDerivedStateFromProps(nextProps,classInstance.state)\r\n            if (partialState) {\r\n                state = {...state,...partialState}\r\n            }\r\n        }\r\n        \r\n        return state\r\n    }\r\n}\r\nfunction shouldUpdate(classInstance, nextProps, nextState) {\r\n   \r\n    let willUpdate = true\r\n    \r\n    if (classInstance.shouldComponentUpdate && !classInstance.shouldComponentUpdate(nextProps, nextState)) {\r\n        willUpdate = false\r\n    }\r\n    if (willUpdate && classInstance.componentWillUpdate) {\r\n        classInstance.componentWillUpdate()\r\n    }\r\n    if (nextProps) {\r\n        classInstance.props = nextProps\r\n    }\r\n    \r\n    classInstance.state = nextState  //不管组件要不要更新，其实组件的state一定会更新\r\n    // if (classInstance.constructor.contextType) {\r\n    //     classInstance.context = classInstance.constructor.contextType.Provider._value\r\n    // }\r\n    if (willUpdate) {\r\n        classInstance.updateComponent()\r\n    }\r\n    \r\n\r\n}\r\nexport class Component{\r\n\r\n    static isReactComponent = true\r\n\r\n    constructor(props){\r\n        this.props = props\r\n        this.state = {}\r\n        this.updater = new Updater(this)\r\n    }\r\n       \r\n    //部分状态\r\n    setState(partialState, cb){\r\n        this.updater.addState(partialState, cb)\r\n    }\r\n\r\n    render(){\r\n        throw new Error('此方法为抽象方法')\r\n    }\r\n        //一般来说组件的属性和状态变化了才会更新组件\r\n        // 如果属性和状态没变,我们也想更新怎么办呢 就可以调用forceUpdate 强行更新\r\n    forceUpdate(){\r\n        let nextState = this.state\r\n        let nextProps = this.props\r\n        if (this.constructor.getDerivedStateFromProps) {\r\n            let partialState = this.constructor.getDerivedStateFromProps(nextProps,nextState)\r\n            if (partialState) {\r\n                nextState = {...nextState,...partialState}\r\n            }\r\n        }\r\n        this.state = nextState\r\n        // if (this.constructor.contextType) {\r\n        //     this.context = this.constructor.contextType.Provider._value\r\n        // }\r\n        this.updateComponent()\r\n    }\r\n    updateComponent (){\r\n        \r\n        let newRenderVdom = this.render() //重新调用render方法 \r\n        let oldRenderVdom=this.oldRenderVdom;//div#counter\r\n        let oldDOM = findDOM(oldRenderVdom);//div#counter\r\n\r\n        let extraArgs = this.getSnapshotBeforeUpdate && this.getSnapshotBeforeUpdate()\r\n        // 深度比较新旧两个虚拟Dom\r\n         compareTwoVdom(oldDOM.parentNode, oldRenderVdom, newRenderVdom)\r\n        \r\n        this.oldRenderVdom = newRenderVdom\r\n        \r\n        // updateClassComponent(this,newVdom)\r\n        if (this.componentDidUpdate) {\r\n            this.componentDidUpdate(this.props, this.state, extraArgs)\r\n        }\r\n    }\r\n}\r\n\r\n// function updateClassComponent(classInstance,newVdom) {\r\n//     let oldDom = classInstance.dom   //取出类组件上次渲染的真实dom\r\n//     let newDom = createDOM(newVdom)\r\n//     oldDom.parentNode.replaceChild(newDom, oldDom) \r\n//     classInstance.dom = newDom\r\n// }\r\n\r\nexport class PureComponent extends Component{\r\n    // 重写了此方法 只有状态 属性变化了才会进行更新 佛则 不更新\r\n    shouldComponentUpdate(nextProps,nextState){\r\n        return !shallowEqual(this.props,nextProps) || !shallowEqual(this.state,nextState)\r\n    }\r\n}\r\nfunction shallowEqual(obj1,obj2) {\r\n    if (obj1 === obj2) {//如果引用地址一样，就相等 不关心属性变没变\r\n        return true\r\n    }\r\n    // 任何一方是对象或者 不是null也不相等 null  null\r\n    if (typeof obj1 !== 'object' || obj1 === null || typeof obj2 !== 'object' || obj2 === null) {\r\n        return false   \r\n    }\r\n\r\n    let keys1 = Object.keys(obj1)\r\n    let keys2 = Object.keys(obj2)\r\n    if (keys1.length !== keys2.length) {\r\n        return false\r\n    }\r\n\r\n    for (const key of keys1) {\r\n        if (!obj2.hasOwnProperty(key) || obj1[key] !== obj2[key]) {\r\n            return false\r\n        }\r\n    }\r\n    return true\r\n}\r\n\r\n\r\n",["33","34"],"D:\\zhufeng\\react\\react\\react\\src\\event.js",[],"D:\\zhufeng\\react\\react\\react\\src\\utils.js",[],"D:\\zhufeng\\react\\react\\react\\src\\constants.js",[],{"ruleId":"35","severity":1,"message":"36","line":1,"column":10,"nodeType":"37","messageId":"38","endLine":1,"endColumn":19},{"ruleId":"39","replacedBy":"40"},{"ruleId":"41","replacedBy":"42"},"no-unused-vars","'createDOM' is defined but never used.","Identifier","unusedVar","no-native-reassign",["43"],"no-negated-in-lhs",["44"],"no-global-assign","no-unsafe-negation"]